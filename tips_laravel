# Tips Urutan Pembuatan MVC pada Laravel :
php artisan help (migrate:status) bantuan 


# Model 	
php artisan make:model -m Flight  (membuat model dan migrasi)

# Migration 
php artisan make:migration create_flights_table	 (membuat file migrasi baru)
php artisan migrate (menjalankan migrasi)
php artisan migrate:status (status migrasi)
php artisan migrate:rollback (mengembalikan migrasi satu tingkat)
php artisan migrate:fresh (menghapus migrate dan menjalankan kembali file migrate)

# Controller 
php artisan make:controller PhotoController (membuat controller dan resource)
php artisan make:controller -r MotorController (membuat controller dan resource controler)



# Seeder
php artisan make:seeder UserSeeder   (membuat seeder)
php artisan db:seed  (menjalankan seeder)

Contoh :
  Motor::create([
            'nama_motor' => 'Honda Beat',
            'merek_id' => 1,
            'warna' => 'Hitam',
            'harga' => 1000000,
            'image' => 'default.jpg'
        ]);

# Factory

- php artisan make:factory MotorFactory (membuat factory)

- Seting Lokasi Faker Locale Indonesia :

1. App/config/app.php
Tambahkan kode berikut
- Faker_locale => env('FAKER_LOCALE', 'en_US')

2. Tambahkan kode berikut di .env
FAKER_LOCALE=id_ID

3. Masukan jumlah data Factory ke DatabaseSeeder
 Motor::factory(20)->create(); / menambahkan 20 data motor random

4. Masukan database property Motor yang akan dibuat di MotorFactory
    
    return [
            'nama_motor' => $this->faker->sentence(2),
            'merek_id' => $this->faker->numberBetween(1, 3),
            'warna' => $this->faker->colorName(),
            'harga' => $this->faker->numberBetween(1000, 2000),
            'image' => $this->faker->image(null, 640, 480)
        ];
        
# Faker Doc (dokumentasi Faker)
https://fakerphp.github.io/

# Tinker
php artisan tinker
$user = new App\Models\User;
$user = new User;
$user->name = 'Affanul hakim'
$user->email = 'affanul@gmail.com'
$user->password = bcrypt('coba)
$user->save()

- Menampilkan data di tinker
$user->all()
$user->first()
$user->find(1)
$user->findOrfail(10) (dengan pesan kesalahan)

# Paginate 
 untuk mengaktifkan link paginate tambahkan  (laravel 9)
Use bootstrap
App\Providers\AppServiceProvider
public function boot()
{
    Paginator::useBootstrapFive();
 
} 

# Relationship

- one to one  
class Post extends Model
{
    /**
     * Get the category that owns the post.
     */
    public function category()
    {
        return $this->belongsTo(Category::class);
    }
}
 
 - one to many
 class Post extends Model
{
    /**
     * Get the comments for the blog post.
     */
    public function comments()
    {
        return $this->hasMany(Comment::class);
    }
}

- Menampilkan berdasar kategori
 -  {{ $post->category->nama }}

# Problem N + 1
Install Library : https://github.com/itsgoingd/clockwork
Install extention chome : clockwork

Untuk melihat di browser chorme, klik kanan di halaman + inspect + clockwork

# Dokumentasi Larevel 
# Eager Loading

- Tambahkan fungsi with untuk mengatasi N+1 problem
- masukan nama tabel relasi kedalam fungsi with

- Contoh 1
$books = Book::with('author')->get();

foreach ($books as $book) {
    echo $book->author->name;
}

- Contoh 2, menambah nama kategori didalam fungsi (with) disini menambah kategori merek karena Controller motor memili relasi dengan kategori merek : Motor::with(['merek'])

class MotorController extends Controller
{
 public function index()
    {
        return view('motor.index', [
            'motor' => Motor::with(['merek'])->orderByDesc('id')->filter(request(['search']))->paginate(10)
        ]);
    }
}


# Lazy Eager Loading, tambahkan fungsi load dengan nama tabel relasi :  $books->load('author', 'publisher')

$books = Book::all();
 
if ($someCondition) {
    $books->load('author', 'publisher');
}


# View Blade 
- Navbar
Operator ternari, apabila variabel title berisi home maka tampilkan active pada navbar :
{{ ($title === "home") ? 'active' : '' }} 

# Flash data, key Flash Data

- Membuat redirect halaman login, sekaligus menampilkan flash data

return redirect('/login_wpu')->with('success_message', 'Registration successfull! Pleace login');

- menampilkan flash data dengan bootstrap

   @if (session()->has('success_message'))        
      <div class="alert alert-success">
           {{ session('success_message) }}
      </div>
    @endif

# Validasi Data : key Validation, pada form user registrasi

      $validatedData =  $request->validate([
            'name' => 'required|max:255',
            'username' => 'required', 'min:3', 'max:255', 'unique:users',
            'email' => 'required|email:dns|unique:users',
            'password' => 'required|min:5|max:255'
        ]);
        
  // Cara encript password dengan hash
  $validatedData['password'] = Hash::make($validatedData['password']);
  
  // Sukses validasi input data ke Database
  User::create($validatedData);
  
# Autentification, Contoh Form Login, key Authentication

- Contoh Fungsi Autentikasi Input Login User :

   public function autenticate(Request $request)
    {
        $credentials = $request->validate([
            'email' => 'required|email:dns',
            'password' => 'required'
        ]);
        // Jika user lolos autentikasi, benar email & password redirect ke Dashboard
        if (Auth::attempt($credentials)) {
            $request->session()->regenerate();
            return redirect()->intended('/dashboard');
        }
        // jika user tidak lolos autentikasi, redirect ke login dengan pesan login error
        return back()->with('loginError', 'Login failed');
    }
    
# Midleware
- Secara default midelware otomatis berjalan dalam laravel, seting midelware berada dalam folder : App/Http/Kernel

- user yang sudah autentifikasi dengan fungsi : Auth
- user yang belum autentikasi : guest

Merubah redirect autentikasi di file : App\Providers\RouteServiceProvider
 Rubah redirect ke halaman yang diinginkan apabila user berhasil login/autentikasi benar :
 
 public const HOME = '/posts';

- Contoh Tag Menampilkan data auth :
  @auth
      tampilkan apabila user login/autentikasi
  @else
      tampilkan apabila user belum login/autentikasi
  @endauth

- Apabila mengakses halaman/route yang bisa hanya user yang sudah login maka default midleware akan mengarahkan ke halaman (login) App\Http\Middleware\Autenticate  Tidak ada Route (Login) halaman tidak bisa diakses/dibatasi login maka dibuatkan name route  : name('login')

Route::get('/login_wpu', [LoginWpuController::class, 'index'])->name('login')->middleware('guest');


